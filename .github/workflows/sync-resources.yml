name: Copy Changed Resources to Target Repositories

on:
  push:
    paths:
      - 'resources/**'
      - 'repositories.yml'
  workflow_dispatch:

jobs:
  copy-resources:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the source repository
      - name: Checkout Source Repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0  # Ensure full history is fetched for diff

      # Step 2: Set Up Node.js Environment (required for generating JWT)
      - name: Set Up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: '20'  # Ensure compatibility

      # Step 3: Install Dependencies (GitHub App authentication)
      - name: Install Dependencies
        run: |
          npm install -g jwt-cli

      # Step 3.1: Install jq for JSON parsing
      - name: Install jq
        run: sudo apt-get install -y jq

      # Step 4: Generate GitHub App JWT
      - name: Generate GitHub App JWT
        id: generate_jwt
        run: |
          echo "${{ secrets.CEYX_SHARED_RESOURCES_SYNC_APP_PRIVATE_KEY }}" > private-key.pem

          if ! grep -q "-----BEGIN PRIVATE KEY-----" private-key.pem; then
                echo "Private key format is invalid."
            exit 1
          fi

          JWT=$(jwt encode --alg RS256 --iss ${{ vars.CEYX_SHARED_RESOURCES_SYNC_APP_ID }} private-key.pem)
          echo "jwt=$JWT" >> $GITHUB_OUTPUT

      # Step 5: Get Installation Access Token
      - name: Get Installation Access Token
        id: get_install_token
        run: |
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ steps.generate_jwt.outputs.jwt }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/app/installations/${{ vars.CEYX_SHARED_RESOURCES_SYNC_APP_INSTALLATION_ID }}/access_tokens)
          TOKEN=$(echo $RESPONSE | jq -r .token)
          if [ "$TOKEN" == "null" ] || [ -z "$TOKEN" ]; then
            echo "Failed to obtain installation access token."
            echo "$RESPONSE"  # Output response for debugging
            exit 1
          fi
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      # Step 6: Identify Changed Files in /resources
      - name: Get Changed Files in /resources
        id: changed_files
        run: |
          FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- resources/)
          echo "files=$FILES" >> $GITHUB_OUTPUT

      # Step 7: Copy Files to Target Repositories
      - name: Copy Files to Targets
        env:
          TARGET_REPOS: ${{ vars.CEYX_SHARED_RESOURCES_SYNC_APP_TARGET_REPOS }}
          INSTALL_TOKEN: ${{ steps.get_install_token.outputs.token }}
          FILES: ${{ steps.changed_files.outputs.files }}
        run: |
          # Convert TARGET_REPOS string into an array
          IFS=$'\n' read -rd '' -a repos <<< "$TARGET_REPOS"

          # Convert changed files string into an array
          IFS=$'\n' read -rd '' -a files <<< "$FILES"

          if [ ${#files[@]} -eq 0 ]; then
            echo "No changes detected in /resources. Exiting."
            exit 0
          fi

          for repo in "${repos[@]}"; do
            echo "Processing repository: $repo"

            # Determine if the repo URL is SSH or HTTPS
            if [[ "$repo" == git@* ]]; then
              git_url="$repo"
            else
              # For HTTPS, embed the token for authentication
              git_url="${repo/https:\/\/github.com\//https://${INSTALL_TOKEN}@github.com/}"
            fi

            # Extract repository name
            repo_name=$(basename -s .git "$repo")

            # Create a temporary directory for the target repo
            temp_dir=$(mktemp -d)

            # Clone the target repository using the Installation Token
            git clone "$git_url" "$temp_dir/$repo_name"

            # Navigate to the cloned repository
            cd "$temp_dir/$repo_name"

            # Configure Git user
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"

            # Initialize a variable to track if there are changes
            changes_made=false

            # Loop through each changed file
            for file in "${files[@]}"; do
              # Define source and target paths
              src_file="../$file"                     # e.g., ../resources/path/to/file
              relative_path="${file#resources/}"       # e.g., path/to/file
              target_file="$relative_path"             # e.g., path/to/file

              # Ensure the target directory exists
              mkdir -p "$(dirname "$target_file")"

              # Copy the file
              cp "$src_file" "$target_file"

              # Stage the file
              git add "$target_file"

              # Mark that changes have been made
              changes_made=true
            done

            # Commit and push if there are changes
            if [ "$changes_made" = true ]; then
              # Commit the changes
              git commit -m "Update resources from source repository"

              # Push to the target repository
              git push origin main  # Replace 'main' with the default branch if different

              echo "Changes pushed to $repo successfully."
            else
              echo "No changes to commit for $repo."
            fi

            # Clean up the temporary directory
            cd -
            rm -rf "$temp_dir"
          done
