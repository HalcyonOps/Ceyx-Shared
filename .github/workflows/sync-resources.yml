name: Sync Repository Files

on:
  push:
    paths:
      - 'resources/**'
  workflow_dispatch:

jobs:
  sync-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          path: source-repo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install jsonwebtoken

      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/github-script@v7
        env:
          APP_ID: ${{ vars.CEYX_SHARED_RESOURCES_SYNC_APP_ID }}
          PRIVATE_KEY: ${{ secrets.CEYX_SHARED_RESOURCES_SYNC_APP_PRIVATE_KEY }}
        with:
          script: |
            const jwt = require('jsonwebtoken');
            try {
              let privateKey = process.env.PRIVATE_KEY;
              
              // Log the initial state (safely)
              console.log('Initial private key length:', privateKey.length);
              console.log('First few characters:', privateKey.substring(0, 10));
              
              // Clean up the private key
              privateKey = privateKey
                .replace(/\\n/g, '\n')  // Replace literal \n with newlines
                .replace(/["']/g, '')   // Remove any quotes
                .trim();                // Remove leading/trailing whitespace
              
              // Ensure proper PEM format
              if (!privateKey.includes('-----BEGIN')) {
                console.log('Adding PEM headers...');
                privateKey = `-----BEGIN RSA PRIVATE KEY-----\n${privateKey}\n-----END RSA PRIVATE KEY-----`;
              }
              
              // Format key with proper line breaks
              const keyParts = privateKey.split('\n');
              let formattedKey = '';
              for (const part of keyParts) {
                if (part.startsWith('-----')) {
                  formattedKey += part + '\n';
                } else {
                  // Split long lines into 64-character chunks
                  const chunks = part.match(/.{1,64}/g) || [];
                  formattedKey += chunks.join('\n') + '\n';
                }
              }
              
              // Log the formatted key structure (safely)
              console.log('Formatted key structure:');
              console.log('- Starts with:', formattedKey.substring(0, 27));
              console.log('- Ends with:', formattedKey.slice(-25));
              console.log('- Total lines:', formattedKey.split('\n').length);
              
              const now = Math.floor(Date.now() / 1000);
              const payload = {
                iat: now - 60,
                exp: now + (10 * 60),
                iss: process.env.APP_ID.toString()
              };

              console.log('Creating JWT with payload:', JSON.stringify(payload));
              
              const token = jwt.sign(payload, formattedKey, { 
                algorithm: 'RS256'
              });
              
              // Verify the token
              jwt.verify(token, formattedKey, { algorithms: ['RS256'] });
              console.log('JWT verification successful');
              
              return token;
            } catch (error) {
              console.error('JWT Generation error details:', {
                name: error.name,
                message: error.message,
                stack: error.stack
              });
              core.setFailed(`JWT Generation failed: ${error.message}`);
              throw error;
            }

      - name: Get Installation Token
        id: get-installation-token
        uses: actions/github-script@v7
        env:
          JWT_TOKEN: ${{ steps.generate-token.outputs.result }}
          INSTALLATION_ID: ${{ vars.CEYX_SHARED_RESOURCES_SYNC_APP_INSTALLATION_ID }}
        with:
          script: |
            try {
              const installationId = process.env.INSTALLATION_ID;
              const response = await github.rest.apps.createInstallationAccessToken({
                installation_id: installationId,
                headers: {
                  authorization: `Bearer ${process.env.JWT_TOKEN}`,
                  accept: 'application/vnd.github.v3+json'
                }
              });
              
              return response.data.token;
            } catch (error) {
              core.setFailed(`Failed to get installation token: ${error.message}`);
              throw error;
            }


      - name: Sync files to target repositories
        uses: actions/github-script@v7
        env:
          INSTALLATION_TOKEN: ${{ steps.get-installation-token.outputs.result }}
          TARGET_REPOS: ${{ vars.CEYX_SHARED_RESOURCES_SYNC_APP_TARGET_REPOS }}
        with:
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            
            async function listFiles(dir) {
              const files = [];
              
              async function traverse(currentPath, relativePath = '') {
                const entries = await fs.readdir(currentPath, { withFileTypes: true });
                
                for (const entry of entries) {
                  const fullPath = path.join(currentPath, entry.name);
                  const relativeFinalPath = path.join(relativePath, entry.name);
                  
                  if (entry.isDirectory()) {
                    await traverse(fullPath, relativeFinalPath);
                  } else {
                    files.push({
                      fullPath,
                      relativePath: relativeFinalPath
                    });
                  }
                }
              }
              
              await traverse(dir);
              return files;
            }

            try {
              const targetRepos = process.env.TARGET_REPOS.split(',').map(repo => repo.trim());
              const sourceFiles = await listFiles('source-repo/resources');
              
              for (const repo of targetRepos) {
                console.log(`Processing target repository: ${repo}`);
                const [owner, repoName] = repo.split('/');
                
                // Get the default branch
                const { data: repoData } = await github.rest.repos.get({
                  owner,
                  repo: repoName,
                  headers: {
                    authorization: `token ${process.env.INSTALLATION_TOKEN}`
                  }
                });
                
                const defaultBranch = repoData.default_branch;

                for (const file of sourceFiles) {
                  try {
                    // Read file content
                    const content = await fs.readFile(file.fullPath, 'base64');
                    
                    // Try to get existing file (to get sha if it exists)
                    let sha;
                    try {
                      const { data: existingFile } = await github.rest.repos.getContent({
                        owner,
                        repo: repoName,
                        path: file.relativePath,
                        headers: {
                          authorization: `token ${process.env.INSTALLATION_TOKEN}`
                        }
                      });
                      sha = existingFile.sha;
                    } catch (error) {
                      // File doesn't exist yet, which is fine
                    }

                    // Create or update file
                    await github.rest.repos.createOrUpdateFileContents({
                      owner,
                      repo: repoName,
                      path: file.relativePath,
                      message: `Sync file: ${file.relativePath}`,
                      content: content.toString('base64'),
                      sha,
                      branch: defaultBranch,
                      headers: {
                        authorization: `token ${process.env.INSTALLATION_TOKEN}`
                      }
                    });
                    
                    console.log(`Successfully synced ${file.relativePath} to ${repo}`);
                  } catch (error) {
                    console.error(`Failed to sync ${file.relativePath} to ${repo}: ${error.message}`);
                    core.error(`Failed to sync ${file.relativePath} to ${repo}: ${error.message}`);
                    // Continue with next file instead of failing completely
                  }
                }
              }
            } catch (error) {
              core.setFailed(`Sync process failed: ${error.message}`);
              throw error;
            }
