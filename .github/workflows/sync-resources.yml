name: Sync Shared Resources

on:
  push:
    paths:
      - 'resources/**'
      - 'repositories.yml'
  workflow_dispatch:

jobs:
  sync-resources:
    runs-on: ubuntu-latest

    permissions:
      contents: write # Grant write permissions to allow push operations

    env:
      GITHUB_APP_ID: ${{ secrets.CEYX_SHARED_RESOURCES_SYNC_APP_ID }}
      GITHUB_APP_PRIVATE_KEY: ${{ secrets.CEYX_SHARED_RESOURCES_SYNC_APP_PRIVATE_KEY }}
      DEFAULT_BRANCH: main
      TEMP_REPO_DIR: temp_repo

    steps:
      - name: Checkout Central Repository
        uses: actions/checkout@v4.2.2

      - name: Setup Environment
        uses: actions/setup-node@v4.1.0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git

          # Install yq
          YQ_VERSION=v4.34.1
          wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Verify yq Installation
        run: yq --version

      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v1.11.0
        with:
          app-id: ${{ env.GITHUB_APP_ID }}
          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}

      - name: Read Target Repositories
        id: get_repos
        run: |
          REPOS=$(yq '.repositories | map(.name + " " + .owner + " " + .path) | join(",")' repositories.yml)
          echo "REPOS=${REPOS}" >> $GITHUB_OUTPUT
        env:
          REPOS_FILE: repositories.yml

      - name: Validate repositories.yml
        run: |
          yq e '.' repositories.yml > /dev/null
        shell: bash

      - name: Sync to Target Repositories
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          REPOS: ${{ steps.get_repos.outputs.REPOS }}
          DEFAULT_BRANCH: ${{ env.DEFAULT_BRANCH }}
          TEMP_REPO_DIR: ${{ env.TEMP_REPO_DIR }}
        run: |
          if [ -z "$REPOS" ]; then
            echo "No repositories found to sync."
            exit 0
          fi

          IFS=',' read -ra REPO_ARRAY <<< "$REPOS"
          for repo in "${REPO_ARRAY[@]}"; do
            IFS=' ' read -ra INFO <<< "$repo"
            REPO_NAME=${INFO[0]}
            REPO_OWNER=${INFO[1]}
            RESOURCE_PATH=${INFO[2]}

            echo "Syncing to $REPO_OWNER/$REPO_NAME"

            # Clone the target repository using the GitHub App token
            git clone https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO_OWNER}/${REPO_NAME}.git $TEMP_REPO_DIR || { 
              echo "Failed to clone repository $REPO_OWNER/$REPO_NAME"; 
              exit 1; 
            }
            cd $TEMP_REPO_DIR

            # Ensure we're on the default branch
            git checkout $DEFAULT_BRANCH || { 
              echo "Failed to checkout $DEFAULT_BRANCH branch in $REPO_OWNER/$REPO_NAME"; 
              exit 1; 
            }

            # Copy updated resources to the target repository
            cp -R ../resources/* ./ || { 
              echo "Failed to copy resources to $REPO_OWNER/$REPO_NAME"; 
              exit 1; 
            }

            # Stage all changes, including new files
            git add .

            # Check if there are any changes to commit
            if git diff --cached --quiet; then
              echo "No changes detected in $REPO_OWNER/$REPO_NAME. Skipping commit."
            else
              # Configure Git
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"

              # Commit changes
              git commit -m "chore: update shared resources from central repository" || { 
                echo "Failed to commit changes in $REPO_OWNER/$REPO_NAME"; 
                exit 1; 
              }

              # Push changes with retry logic
              retry_count=0
              max_retries=3
              until git push origin $DEFAULT_BRANCH || [ $retry_count -ge $max_retries ]; do
                retry_count=$((retry_count + 1))
                echo "Retrying push... Attempt $retry_count"
                sleep 5
              done

              if [ $retry_count -ge $max_retries ]; then
                echo "Git push failed for repository $REPO_OWNER/$REPO_NAME after $max_retries attempts."
                exit 1
              fi

              echo "Successfully synced $REPO_OWNER/$REPO_NAME."
            fi

            cd ..
            rm -rf $TEMP_REPO_DIR
          done
        shell: /usr/bin/bash -e {0}

