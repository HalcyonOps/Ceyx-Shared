name: Sync Shared Files to Modules

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      REPOSITORIES: |
        HalcyonOps/Ceyx-AWS-EC2
        HalcyonOps/Ceyx-AWS-EKS
        HalcyonOps/Ceyx-AWS-S3Bucket
        HalcyonOps/Ceyx-AWS-VPC
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Sync Shared Files
        id: sync
        uses: varunsridharan/action-github-workflow-sync@3.4
        with:
          GITHUB_TOKEN: ${{ secrets.CEYX_SHARED_TOKEN }}
          REPOSITORIES: ${{ env.REPOSITORIES }}
          WORKFLOW_FILES: |
            resources/modules/.pre-commit-config.yaml=../../.pre-commit-config.yaml
            resources/modules/.terraform-docs.yml=../../.terraform-docs.yml

            resources/shared/CODE_OF_CONDUCT.md=../../CODE_OF_CONDUCT.md
            resources/shared/CONTRIBUTING.md=../../CONTRIBUTING.md
            resources/shared/LICENSE=../../LICENSE
            resources/shared/SECURITY.md=../../SECURITY.md
            
            resources/workflows/security-scan.yml=security-scan.yml
            resources/workflows/terraform-ci.yml=terraform-ci.yml
            resources/workflows/terraform-tests.yml=terraform-tests.yml
          WORKFLOW_FILES_DIR: .
          PULL_REQUEST: true
          COMMIT_MESSAGE: "Sync shared files from source repository"

      - name: Enable Auto-Merge for PRs
        run: |
          # Function to log messages with timestamp
          log_message() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
          }

          # Read the REPOSITORIES variable
          if [ -z "${REPOSITORIES:-}" ]; then
              log_message "REPOSITORIES environment variable is empty or not set"
              exit 0  # Exit successfully if no repos to process
          fi

          # Read into array, handling potential empty lines
          mapfile -t repos < <(echo "$REPOSITORIES" | grep -v '^[[:space:]]*$' || true)

          if [ ${#repos[@]} -eq 0 ]; then
              log_message "No repositories to process"
              exit 0
          fi

          # Process each repository
          for repo in "${repos[@]}"; do
              if [ -z "$repo" ]; then
                  continue
              fi
              
              log_message "Processing repository: $repo"
              
              # Get PR number, continue if none found
              pr_number=$(gh pr list \
                  --repo "$repo" \
                  --author "R055LE" \
                  --state open \
                  --json number \
                  --jq '.[0].number' 2>/dev/null || echo "")
              
              if [ -z "$pr_number" ]; then
                  log_message "No open pull request found for $repo - skipping"
                  continue
              fi
              
              log_message "Found PR #$pr_number for repository $repo"
              
              # Try to enable auto-merge
              gh pr merge --auto --squash "$pr_number" --repo "$repo" 2>/dev/null || {
                  log_message "Failed to enable auto-merge for PR #$pr_number in $repo - continuing"
                  continue
              }
              
              # Wait for merge
              max_attempts=60
              attempt=0
              while [ $attempt -lt $max_attempts ]; do
                  pr_state=$(gh pr view "$pr_number" --repo "$repo" --json state --jq '.state' 2>/dev/null || echo "")
                  
                  if [ "$pr_state" = "MERGED" ]; then
                      log_message "PR #$pr_number in $repo has been merged successfully"
                      
                      # Get branch name
                      branch_name=$(gh pr view "$pr_number" --repo "$repo" --json headRefName --jq '.headRefName' 2>/dev/null || echo "")
                      
                      if [ -n "$branch_name" ]; then
                          # Try to delete branch
                          gh api -X DELETE "repos/$repo/git/refs/heads/$branch_name" 2>/dev/null || {
                              log_message "Failed to delete branch $branch_name in $repo - continuing"
                          }
                          log_message "Cleaned up branch $branch_name in $repo"
                      fi
                      break
                  elif [ "$pr_state" = "CLOSED" ]; then
                      log_message "PR #$pr_number in $repo was closed without merging - continuing"
                      break
                  fi
                  
                  ((attempt++))
                  if [ $attempt -eq $max_attempts ]; then
                      log_message "Timeout waiting for PR #$pr_number in $repo to merge - continuing"
                      break
                  fi
                  
                  log_message "Waiting for PR #$pr_number in $repo to merge... (Attempt $attempt/$max_attempts)"
                  sleep 5
              done
          done

          log_message "Script completed"
          exit 0
        env:
          GH_TOKEN: ${{ secrets.CEYX_SHARED_TOKEN }}
          REPOSITORIES: ${{ env.REPOSITORIES }}
